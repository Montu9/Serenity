// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid       String @unique @db.Uuid
  email      String @unique
  passwdHash String

  firstName String?
  lastName  String?
  gender    Gender  @relation(fields: [genderId], references: [id])
  genderId  Int

  shelters UsersShelters[]
  Walk     Walk[]
  Feeding  Feeding[]
  Cleaning Cleaning[]
  Medicate Medicate[]
}

model Shelter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid String  @unique @db.Uuid
  name String?

  users  UsersShelters[]
  Kennel Kennel[]
}

model UsersShelters {
  User      User    @relation(fields: [userId], references: [id])
  userId    Int
  Shelter   Shelter @relation(fields: [shelterId], references: [id])
  shelterId Int

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, shelterId])
}

model Kennel {
  id Int @id @default(autoincrement())

  no      Int
  desc    String?
  uuid    String  @db.Uuid
  shelter Shelter @relation(fields: [shelterId], references: [id])

  Dog       Dog[]
  shelterId Int
}

model Role {
  id            Int             @id @default(autoincrement())
  name          String
  UsersShelters UsersShelters[]
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Dog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  uuid           String       @unique @db.Uuid
  dogStatus      DogStatus    @relation(fields: [dogStatusId], references: [id])
  dogStatusId    Int
  dateOfBirth    DateTime     @db.Date
  gender         DogGender
  microchip      String?
  intake         IntakeType   @relation(fields: [intakeTypeId], references: [id])
  intakeTypeId   Int
  intakeDate     DateTime     @db.Date
  dogCondition   DogCondition @relation(fields: [dogConditionId], references: [id])
  dogConditionId Int
  breed          Breed        @relation(fields: [breedId], references: [id])
  breedId        Int
  Walk           Walk[]
  Feeding        Feeding[]
  Cleaning       Cleaning[]
  Medicate       Medicate[]
  kennel         Kennel       @relation(fields: [kennelId], references: [id])
  kennelId       Int
  images         Image[]
}

model Image {
  id   Int    @id @default(autoincrement())
  path String
  dogs Dog[]
}

enum DogGender {
  MALE
  FEMALE
}

model DogStatus {
  id   Int    @id @default(autoincrement())
  name String
  Dog  Dog[]
}

model IntakeType {
  id   Int    @id @default(autoincrement())
  name String
  Dog  Dog[]
}

model DogCondition {
  id   Int    @id @default(autoincrement())
  name String
  Dog  Dog[]
}

model Breed {
  id    Int     @id @default(autoincrement())
  name  String
  url   String?
  image String?
  pdf   String?
  Dog   Dog[]
}

model Walk {
  id     Int       @id @default(autoincrement())
  start  DateTime
  end    DateTime?
  user   User      @relation(fields: [userId], references: [id])
  dog    Dog       @relation(fields: [dogId], references: [id])
  userId Int
  dogId  Int
}

model Feeding {
  id   Int      @id @default(autoincrement())
  date DateTime @db.Date
  user User     @relation(fields: [userId], references: [id])
  dog  Dog      @relation(fields: [dogId], references: [id])

  userId Int
  dogId  Int
}

model Cleaning {
  id     Int      @id @default(autoincrement())
  date   DateTime @db.Date
  user   User     @relation(fields: [userId], references: [id])
  dog    Dog      @relation(fields: [dogId], references: [id])
  userId Int
  dogId  Int
}

model Medicate {
  id     Int      @id @default(autoincrement())
  date   DateTime @db.Date
  user   User     @relation(fields: [userId], references: [id])
  dog    Dog      @relation(fields: [dogId], references: [id])
  userId Int
  dogId  Int
}
